#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright: (c) 2021, 2022, Herve Quatremain <rv4m@yahoo.co.uk>
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

# For accessing the API documentation from a running system, use the swagger-ui
# container image:
#
#  $ podman run -p 8888:8080 --name=swag -d --rm \
#      -e API_URL=http://your.quay.installation:8080/api/v1/discovery \
#      docker.io/swaggerapi/swagger-ui
#
#  (replace the hostname and port in API_URL with your own installation)
#
# And then navigate to http://localhost:8888


from __future__ import absolute_import, division, print_function

__metaclass__ = type


DOCUMENTATION = r"""
---
module: quay_vulnerability_info
short_description: Gather information about image vulnerabilities in Quay Container Registry
description:
  - Gather information about the vulnerabilities of an image in a repository.
version_added: '0.0.1'
author: Herve Quatremain (@herve4m)
options:
  image:
    description:
      - Name of the image. The format is C(namespace)/C(repository):C(tag) or
        C(namespace)/C(repository)@C(digest). The namespace can be an
        organization or a personal namespace.
      - If you omit the namespace part, then the module looks for the
        repository in your personal namespace.
      - If you omit the tag and the digest part, then C(latest) is assumed.
    required: true
    type: str
notes:
  - If a vulnerability scanner such as Clair is not installed, then the
    returned vulnerability list is always empty.
extends_documentation_fragment:
  - herve4m.quay.auth
  - herve4m.quay.auth.login
"""

EXAMPLES = r"""
- name: Retrieve the vulnerabilities of the coreos/dnsmasq:latest image
  herve4m.quay.quay_vulnerability_info:
    image: coreos/dnsmasq:latest
    quay_host: quay.io
  register: vuln
"""

RETURN = r"""
vulnerabilities:
  description: List of vulnerabilities.
  returned: always
  type: list
  elements: dict
  contains:
    Name:
      description: Name of the vulnerable software or package.
      type: str
      returned: always
      sample: dnsmasq
    Version:
      description: Version of the vulnerable software or package.
      type: str
      returned: always
      sample: 2.76-r5
    VersionFormat:
      description: Packaging format (C(rpm), C(dpkg), ...)
      type: str
      returned: always
      sample: dpkg
    Vulnerabilities:
      description: List of vulnerabilities for the software or package.
      returned: always
      type: list
      elements: dict
      sample: [
                {
                    "Description": null,
                    "FixedBy": "2.76-r6",
                    "Link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-15107",
                    "Metadata": {
                        "NVD": {
                            "CVSSv2": {
                                "PublishedDateTime": "2018-01-23T16:29Z",
                                "Score": 5,
                                "Vectors": "AV:N/AC:L/Au:N/C:N/I:P/A:N"
                            },
                            "CVSSv3": {
                                "ExploitabilityScore": 3.9,
                                "ImpactScore": 3.6,
                                "Score": 7.5,
                                "Vectors": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N"
                            }
                        }
                    },
                    "Name": "CVE-2017-15107",
                    "NamespaceName": "alpine:v3.6",
                    "Severity": "Medium"
                }
              ]
  sample: [
            {
                "AddedBy": "b95b...3753.d2943905-38bd-42ed-a468-d350d7aa5c86",
                "Name": "python38-pip-wheel",
                "NamespaceName": "centos:8",
                "Version": "19.3.1-1.module_el8.4.0+647+0ba99ce8",
                "VersionFormat": "rpm",
                "Vulnerabilities": [
                    {
                        "Description": "Python is an interpreted, interactive, ...",
                        "FixedBy": "0:19.3.1-1.module+el8.4.0+8888+89bc7e79",
                        "Link": "https://access.redhat.com/errata/RHSA-2021:1879",
                        "Metadata": null,
                        "Name": "RHSA-2021:1879",
                        "NamespaceName": "centos:8",
                        "Severity": "Medium"
                    },
                    {
                        "Description": "Python is an interpreted, interactive, ...",
                        "FixedBy": "0:19.3.1-1.module+el8.4.0+8888+89bc7e79",
                        "Link": "https://access.redhat.com/errata/RHSA-2021:2583",
                        "Metadata": null,
                        "Name": "RHSA-2021:2583",
                        "NamespaceName": "centos:8",
                        "Severity": "Medium"
                    }
                ]
            },
            {
                "AddedBy": "b95b...3753.d2943905-38bd-42ed-a468-d350d7aa5c86",
                "Name": "python38-libs",
                "NamespaceName": "centos:8",
                "Version": "3.8.6-3.module_el8.4.0+665+abc3a503",
                "VersionFormat": "rpm",
                "Vulnerabilities": [
                    {
                        "Description": "Python is an interpreted, interactive, ...",
                        "FixedBy": "0:3.8.6-3.module+el8.4.0+9579+e9717e18",
                        "Link": "https://access.redhat.com/errata/RHSA-2021:1879",
                        "Metadata": null,
                        "Name": "RHSA-2021:1879",
                        "NamespaceName": "centos:8",
                        "Severity": "Medium"
                    },
                    {
                        "Description": "Python is an interpreted, interactive, ...",
                        "FixedBy": "0:3.8.6-3.module+el8.4.0+9579+e9717e18",
                        "Link": "https://access.redhat.com/errata/RHSA-2021:2583",
                        "Metadata": null,
                        "Name": "RHSA-2021:2583",
                        "NamespaceName": "centos:8",
                        "Severity": "Medium"
                    }
                ]
            }
          ]
"""

from ..module_utils.api_module import APIModule, APIModuleError
from ..module_utils.quay_image import QuayImage


def main():
    argument_spec = dict(image=dict(required=True))

    # Create a module for ourselves
    module = APIModule(argument_spec=argument_spec, supports_check_mode=True)

    # Extract our parameters
    name = module.params.get("image").strip("/:")

    # Get the components of the given image (namespace, repository, tag, digest)
    img = QuayImage(module, name)
    namespace = img.namespace
    if namespace is None:
        module.fail_json(
            msg=(
                "The `image' parameter must include the"
                " organization: <organization>/{name}."
            ).format(name=name)
        )

    # Check whether namespace exists (organization or user account)
    namespace_details = module.get_namespace(namespace)
    if not namespace_details:
        module.exit_json(changed=False, vulnerabilities=[])

    # Get the digest
    if img.digest:
        manifest_digest = img.digest
    else:
        tags = module.get_tags(namespace, img.repository, img.tag, only_active_tags=False)
        if not tags:
            module.exit_json(changed=False, vulnerabilities=[])
        try:
            manifest_digest = tags[0]["manifest_digest"]
        except KeyError:
            module.fail_json(
                msg="Cannot retrieve the manifest digest for the {image} image.".format(
                    image=name
                )
            )

    # Get the vulnerabilities
    #
    # GET
    #  /api/v1/repository/{namespace}/{repo}/manifest/{digest}/security?vulnerabilities=true
    # {
    #   "status": "scanned",
    #   "data": {
    #     "Layer": {
    #       "Features": [
    #         {
    #           "Name": "libzstd",
    #           "VersionFormat": "rpm",
    #           "NamespaceName": "centos:8",
    #           "AddedBy": "29b3...13fd.beec3614-c397-4dc8-bc9b-2a8d921b9a7e",
    #           "Version": "1.4.4-1.el8",
    #           "Vulnerabilities": []
    #         },
    #         {
    #           "Name": "gmp",
    #           "VersionFormat": "rpm",
    #           "NamespaceName": "centos:8",
    #           "AddedBy": "29b3...13fd.beec3614-c397-4dc8-bc9b-2a8d921b9a7e",
    #           "Version": "1:6.1.2-10.el8",
    #           "Vulnerabilities": []
    #         },
    #         {
    #           "Name": "python38-wheel",
    #           "VersionFormat": "rpm",
    #           "NamespaceName": "centos:8",
    #           "AddedBy": "0e93...9210.43268bd7-e3d3-4dea-b784-8b58c3e6b2d0",
    #           "Version": "0.33.6-5.module_el8.4.0+647+0ba99ce8",
    #           "Vulnerabilities": [
    #             {
    #               "Name": "RHSA-2021:1879",
    #               "NamespaceName": "centos:8",
    #               "Link": "https://access.redhat.com/errata/RHSA-2021:1879",
    #               "FixedBy": "0:0.33.6-5.module+el8.4.0+8888+89bc7e79",
    #               "Description": "Python is an interpreted, ... section.",
    #               "Metadata": null,
    #               "Severity": "Medium"
    #             },
    #             {
    #               "Name": "RHSA-2021:2583",
    #               "NamespaceName": "centos:8",
    #               "Link": "https://access.redhat.com/errata/RHSA-2021:2583",
    #               "FixedBy": "0:0.33.6-5.module+el8.4.0+8888+89bc7e79",
    #               "Description": "Python is an interpreted, ... section.",
    #               "Metadata": null,
    #               "Severity": "Medium"
    #             }
    #           ]
    #         },
    #         {
    #           "Name": "perl-PathTools",
    #           "VersionFormat": "rpm",
    #           "NamespaceName": "centos:8",
    #           "AddedBy": "0e93...9210.43268bd7-e3d3-4dea-b784-8b58c3e6b2d0",
    #           "Version": "3.74-1.el8",
    #           "Vulnerabilities": []
    #         }
    #       ]
    #     }
    #   }
    # }
    query_params = {"vulnerabilities": True}
    try:
        vulns = module.get_object_path(
            "repository/{namespace}/{repository}/manifest/{manifest_digest}/security",
            query_params=query_params,
            exit_on_error=False,
            namespace=namespace,
            repository=img.repository,
            manifest_digest=manifest_digest,
        )
    except APIModuleError:
        # The Quay installation does not have Clair installed
        module.exit_json(changed=False, vulnerabilities=[])

    if (
        not vulns
        or "data" not in vulns
        or "Layer" not in vulns["data"]
        or "Features" not in vulns["data"]["Layer"]
    ):
        module.exit_json(changed=False, vulnerabilities=[])

    vulnerabilities = [
        i
        for i in vulns["data"]["Layer"].get("Features", [])
        if len(i.get("Vulnerabilities", [])) > 0
    ]
    module.exit_json(changed=False, vulnerabilities=vulnerabilities)


if __name__ == "__main__":
    main()
